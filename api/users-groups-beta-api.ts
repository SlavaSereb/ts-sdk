/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {AxiosInstance, AxiosPromise, AxiosRequestConfig} from 'axios';
import {Configuration} from "../configuration";
import {RequestOptions} from "../models/request-options";
import {HttpClient} from "../utils/http-client";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';


// Some imports not used depending on template conditions
// @ts-ignore
import { assertParamExists, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

// @ts-ignore
import { CreateUsersGroupResponse } from '../models';
// @ts-ignore
import { UserGroupCreateRequest } from '../models';
// @ts-ignore
import { UserGroupCreateResponse } from '../models';
// @ts-ignore
import { UserGroupUpdateRequest } from '../models';
// @ts-ignore
import { UsersGroupResponse } from '../models';



    /**
 * UsersGroupsBetaApi - axios parameter creator
 * @export
 */
export const UsersGroupsBetaApiAxiosParamCreator = function (configuration?: Configuration, requestOptions?:RequestOptions) {
    return {
        /**
         * Create a new users group.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. - Please note that this endpoint is available only for API keys with Admin permissions. 
         * @summary Create users group
         * @param {UserGroupCreateRequest} userGroupCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserGroup: async (userGroupCreateRequest: UserGroupCreateRequest,  requestOptions?: RequestOptions): Promise<AxiosRequestConfig> => {
            // verify required parameter 'userGroupCreateRequest' is not null or undefined
            assertParamExists('createUserGroup', 'userGroupCreateRequest', userGroupCreateRequest)
            const localVarPath = `/users_groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.data = userGroupCreateRequest as any;
            const idempotencyKey = requestOptions?.idempotencyKey;
            if (idempotencyKey) {
                localVarHeaderParameter["Idempotency-Key"] = idempotencyKey;
            }

            const ncwWalletId = requestOptions?.ncw?.walletId;
            if (ncwWalletId) {
                localVarHeaderParameter["X-End-User-Wallet-Id"] = ncwWalletId;
            }
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Delete a users group by ID.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. - Please note that this endpoint is available only for API keys with Admin permissions. 
         * @summary Delete users group
         * @param {string} groupId The ID of the users group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserGroup: async (groupId: string,  requestOptions?: RequestOptions): Promise<AxiosRequestConfig> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('deleteUserGroup', 'groupId', groupId)
            const localVarPath = `/users_groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'DELETE'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            const idempotencyKey = requestOptions?.idempotencyKey;
            if (idempotencyKey) {
                localVarHeaderParameter["Idempotency-Key"] = idempotencyKey;
            }

            const ncwWalletId = requestOptions?.ncw?.walletId;
            if (ncwWalletId) {
                localVarHeaderParameter["X-End-User-Wallet-Id"] = ncwWalletId;
            }
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Get a users group by ID.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. - Please note that this endpoint is available only for API keys with Admin permissions. 
         * @summary Get users group
         * @param {string} groupId The ID of the users group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGroup: async (groupId: string,  requestOptions?: RequestOptions): Promise<AxiosRequestConfig> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getUserGroup', 'groupId', groupId)
            const localVarPath = `/users_groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            const idempotencyKey = requestOptions?.idempotencyKey;
            if (idempotencyKey) {
                localVarHeaderParameter["Idempotency-Key"] = idempotencyKey;
            }

            const ncwWalletId = requestOptions?.ncw?.walletId;
            if (ncwWalletId) {
                localVarHeaderParameter["X-End-User-Wallet-Id"] = ncwWalletId;
            }
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Get all user groups in your workspace. </br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. - Please note that this endpoint is available only for API keys with Admin permissions. 
         * @summary List users groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGroups: async ( requestOptions?: RequestOptions): Promise<AxiosRequestConfig> => {
            const localVarPath = `/users_groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            const idempotencyKey = requestOptions?.idempotencyKey;
            if (idempotencyKey) {
                localVarHeaderParameter["Idempotency-Key"] = idempotencyKey;
            }

            const ncwWalletId = requestOptions?.ncw?.walletId;
            if (ncwWalletId) {
                localVarHeaderParameter["X-End-User-Wallet-Id"] = ncwWalletId;
            }
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Update a users group by ID.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. - Please note that this endpoint is available only for API keys with Admin permissions. 
         * @summary Update users group
         * @param {UserGroupUpdateRequest} userGroupUpdateRequest 
         * @param {string} groupId The ID of the users group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserGroup: async (userGroupUpdateRequest: UserGroupUpdateRequest, groupId: string,  requestOptions?: RequestOptions): Promise<AxiosRequestConfig> => {
            // verify required parameter 'userGroupUpdateRequest' is not null or undefined
            assertParamExists('updateUserGroup', 'userGroupUpdateRequest', userGroupUpdateRequest)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('updateUserGroup', 'groupId', groupId)
            const localVarPath = `/users_groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'PUT'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.data = userGroupUpdateRequest as any;
            const idempotencyKey = requestOptions?.idempotencyKey;
            if (idempotencyKey) {
                localVarHeaderParameter["Idempotency-Key"] = idempotencyKey;
            }

            const ncwWalletId = requestOptions?.ncw?.walletId;
            if (ncwWalletId) {
                localVarHeaderParameter["X-End-User-Wallet-Id"] = ncwWalletId;
            }
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersGroupsBetaApi - functional programming interface
 * @export
 */
export const UsersGroupsBetaApiFp = function(httpClient: HttpClient) {
    const localVarAxiosParamCreator = UsersGroupsBetaApiAxiosParamCreator(httpClient.configuration)
    return {
        /**
         * Create a new users group.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. - Please note that this endpoint is available only for API keys with Admin permissions. 
         * @summary Create users group
         * @param {UserGroupCreateRequest} userGroupCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserGroup(userGroupCreateRequest: UserGroupCreateRequest,  requestOptions?: RequestOptions): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUsersGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserGroup(userGroupCreateRequest, requestOptions);
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Delete a users group by ID.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. - Please note that this endpoint is available only for API keys with Admin permissions. 
         * @summary Delete users group
         * @param {string} groupId The ID of the users group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserGroup(groupId: string,  requestOptions?: RequestOptions): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserGroup(groupId, requestOptions);
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Get a users group by ID.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. - Please note that this endpoint is available only for API keys with Admin permissions. 
         * @summary Get users group
         * @param {string} groupId The ID of the users group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserGroup(groupId: string,  requestOptions?: RequestOptions): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserGroup(groupId, requestOptions);
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Get all user groups in your workspace. </br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. - Please note that this endpoint is available only for API keys with Admin permissions. 
         * @summary List users groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserGroups( requestOptions?: RequestOptions): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UsersGroupResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserGroups(requestOptions);
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Update a users group by ID.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. - Please note that this endpoint is available only for API keys with Admin permissions. 
         * @summary Update users group
         * @param {UserGroupUpdateRequest} userGroupUpdateRequest 
         * @param {string} groupId The ID of the users group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserGroup(userGroupUpdateRequest: UserGroupUpdateRequest, groupId: string,  requestOptions?: RequestOptions): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGroupCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserGroup(userGroupUpdateRequest, groupId, requestOptions);
            return httpClient.request(localVarAxiosArgs);
        },
    }
};

/**
 * Request parameters for createUserGroup operation in UsersGroupsBetaApi.
 * @export
 * @interface UsersGroupsBetaApiCreateUserGroupRequest
 */
export interface UsersGroupsBetaApiCreateUserGroupRequest {
    /**
     * 
     * @type {UserGroupCreateRequest}
     * @memberof UsersGroupsBetaApiCreateUserGroup
     */
    readonly userGroupCreateRequest: UserGroupCreateRequest
}

/**
 * Request parameters for deleteUserGroup operation in UsersGroupsBetaApi.
 * @export
 * @interface UsersGroupsBetaApiDeleteUserGroupRequest
 */
export interface UsersGroupsBetaApiDeleteUserGroupRequest {
    /**
     * The ID of the users group
     * @type {string}
     * @memberof UsersGroupsBetaApiDeleteUserGroup
     */
    readonly groupId: string
}

/**
 * Request parameters for getUserGroup operation in UsersGroupsBetaApi.
 * @export
 * @interface UsersGroupsBetaApiGetUserGroupRequest
 */
export interface UsersGroupsBetaApiGetUserGroupRequest {
    /**
     * The ID of the users group
     * @type {string}
     * @memberof UsersGroupsBetaApiGetUserGroup
     */
    readonly groupId: string
}

/**
 * Request parameters for updateUserGroup operation in UsersGroupsBetaApi.
 * @export
 * @interface UsersGroupsBetaApiUpdateUserGroupRequest
 */
export interface UsersGroupsBetaApiUpdateUserGroupRequest {
    /**
     * 
     * @type {UserGroupUpdateRequest}
     * @memberof UsersGroupsBetaApiUpdateUserGroup
     */
    readonly userGroupUpdateRequest: UserGroupUpdateRequest

    /**
     * The ID of the users group
     * @type {string}
     * @memberof UsersGroupsBetaApiUpdateUserGroup
     */
    readonly groupId: string
}

/**
 * UsersGroupsBetaApi - object-oriented interface
 * @export
 * @class UsersGroupsBetaApi
 * @extends {BaseAPI}
 */
export class UsersGroupsBetaApi extends BaseAPI {
    /**
     * Create a new users group.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. - Please note that this endpoint is available only for API keys with Admin permissions. 
     * @summary Create users group
     * @param {UsersGroupsBetaApiCreateUserGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersGroupsBetaApi
     */
     public createUserGroup(requestParameters: UsersGroupsBetaApiCreateUserGroupRequest,  requestOptions?: RequestOptions) {
        return UsersGroupsBetaApiFp(this.httpClient).createUserGroup(requestParameters.userGroupCreateRequest, requestOptions);
    }

    /**
     * Delete a users group by ID.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. - Please note that this endpoint is available only for API keys with Admin permissions. 
     * @summary Delete users group
     * @param {UsersGroupsBetaApiDeleteUserGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersGroupsBetaApi
     */
     public deleteUserGroup(requestParameters: UsersGroupsBetaApiDeleteUserGroupRequest,  requestOptions?: RequestOptions) {
        return UsersGroupsBetaApiFp(this.httpClient).deleteUserGroup(requestParameters.groupId, requestOptions);
    }

    /**
     * Get a users group by ID.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. - Please note that this endpoint is available only for API keys with Admin permissions. 
     * @summary Get users group
     * @param {UsersGroupsBetaApiGetUserGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersGroupsBetaApi
     */
     public getUserGroup(requestParameters: UsersGroupsBetaApiGetUserGroupRequest,  requestOptions?: RequestOptions) {
        return UsersGroupsBetaApiFp(this.httpClient).getUserGroup(requestParameters.groupId, requestOptions);
    }

    /**
     * Get all user groups in your workspace. </br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. - Please note that this endpoint is available only for API keys with Admin permissions. 
     * @summary List users groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersGroupsBetaApi
     */
     public getUserGroups( requestOptions?: RequestOptions) {
        return UsersGroupsBetaApiFp(this.httpClient).getUserGroups(requestOptions);
    }

    /**
     * Update a users group by ID.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. - Please note that this endpoint is available only for API keys with Admin permissions. 
     * @summary Update users group
     * @param {UsersGroupsBetaApiUpdateUserGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersGroupsBetaApi
     */
     public updateUserGroup(requestParameters: UsersGroupsBetaApiUpdateUserGroupRequest,  requestOptions?: RequestOptions) {
        return UsersGroupsBetaApiFp(this.httpClient).updateUserGroup(requestParameters.userGroupUpdateRequest, requestParameters.groupId, requestOptions);
    }
}
