/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {AxiosInstance, AxiosPromise, AxiosRequestConfig} from 'axios';
import {Configuration} from "../configuration";
import {RequestOptions} from "../models/request-options";
import {HttpClient} from "../utils/http-client";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';


// Some imports not used depending on template conditions
// @ts-ignore
import { assertParamExists, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';




    /**
 * AuditLogsApi - axios parameter creator
 * @export
 */
export const AuditLogsApiAxiosParamCreator = function (configuration?: Configuration, requestOptions?:RequestOptions) {
    return {
        /**
         * Get all audits
         * @summary Get audit logs
         * @param {'DAY' | 'WEEK'} timePeriod The last time period to fetch audit logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudits: async (timePeriod: 'DAY' | 'WEEK',  requestOptions?: RequestOptions): Promise<AxiosRequestConfig> => {
            // verify required parameter 'timePeriod' is not null or undefined
            assertParamExists('getAudits', 'timePeriod', timePeriod)
            const localVarPath = `/audits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            if (timePeriod !== undefined) {
                localVarQueryParameter['timePeriod'] = timePeriod;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            const idempotencyKey = requestOptions?.idempotencyKey;
            if (idempotencyKey) {
                localVarHeaderParameter["Idempotency-Key"] = idempotencyKey;
            }

            const ncwWalletId = requestOptions?.ncw?.walletId;
            if (ncwWalletId) {
                localVarHeaderParameter["X-End-User-Wallet-Id"] = ncwWalletId;
            }
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
    }
};

/**
 * AuditLogsApi - functional programming interface
 * @export
 */
export const AuditLogsApiFp = function(httpClient: HttpClient) {
    const localVarAxiosParamCreator = AuditLogsApiAxiosParamCreator(httpClient.configuration)
    return {
        /**
         * Get all audits
         * @summary Get audit logs
         * @param {'DAY' | 'WEEK'} timePeriod The last time period to fetch audit logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudits(timePeriod: 'DAY' | 'WEEK',  requestOptions?: RequestOptions): Promise<void> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAudits(timePeriod, requestOptions);
            return httpClient.request(localVarAxiosArgs);
        },
    }
};

/**
 * Request parameters for getAudits operation in AuditLogsApi.
 * @export
 * @interface AuditLogsApiGetAuditsRequest
 */
export interface AuditLogsApiGetAuditsRequest {
    /**
     * The last time period to fetch audit logs
     * @type {'DAY' | 'WEEK'}
     * @memberof AuditLogsApiGetAudits
     */
    readonly timePeriod: 'DAY' | 'WEEK'
}

/**
 * AuditLogsApi - object-oriented interface
 * @export
 * @class AuditLogsApi
 * @extends {BaseAPI}
 */
export class AuditLogsApi extends BaseAPI {
    /**
     * Get all audits
     * @summary Get audit logs
     * @param {AuditLogsApiGetAuditsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogsApi
     */
     public getAudits(requestParameters: AuditLogsApiGetAuditsRequest,  requestOptions?: RequestOptions) {
        return AuditLogsApiFp(this.httpClient).getAudits(requestParameters.timePeriod, requestOptions);
    }
}
